defmodule Lor.Repo.Migrations.CreateLolReplays do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:lol_replays, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :game_meta_data, :map, null: false
      add :game_id, :bigint, null: false
      add :platform_id, :text, null: false
      add :encryption_key, :text, null: false
      add :status, :text, null: false, default: "recording"
      add :inserted_at, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_at, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:lol_replays, [:game_id, :platform_id], name: "lol_replays_game_id_index")

    create table(:lol_replay_key_frames, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :number, :smallint, null: false

      add :replay_id,
          references(:lol_replays,
            column: :id,
            name: "lol_replay_key_frames_replay_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :data_id,
          references(:s3_objects,
            column: :id,
            name: "lol_replay_key_frames_data_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create unique_index(:lol_replay_key_frames, [:number, :replay_id],
             name: "lol_replay_key_frames_unique_key_frame_number_per_replay_index"
           )

    create table(:lol_replay_chunks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :number, :smallint, null: false

      add :replay_id,
          references(:lol_replays,
            column: :id,
            name: "lol_replay_chunks_replay_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :data_id,
          references(:s3_objects,
            column: :id,
            name: "lol_replay_chunks_data_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create unique_index(:lol_replay_chunks, [:number, :replay_id],
             name: "lol_replay_chunks_unique_chunk_number_per_replay_index"
           )
  end

  def down do
    drop_if_exists unique_index(:lol_replay_chunks, [:number, :replay_id],
                     name: "lol_replay_chunks_unique_chunk_number_per_replay_index"
                   )

    drop constraint(:lol_replay_chunks, "lol_replay_chunks_replay_id_fkey")

    drop constraint(:lol_replay_chunks, "lol_replay_chunks_data_id_fkey")

    drop table(:lol_replay_chunks)

    drop_if_exists unique_index(:lol_replay_key_frames, [:number, :replay_id],
                     name: "lol_replay_key_frames_unique_key_frame_number_per_replay_index"
                   )

    drop constraint(:lol_replay_key_frames, "lol_replay_key_frames_replay_id_fkey")

    drop constraint(:lol_replay_key_frames, "lol_replay_key_frames_data_id_fkey")

    drop table(:lol_replay_key_frames)

    drop_if_exists unique_index(:lol_replays, [:game_id, :platform_id],
                     name: "lol_replays_game_id_index"
                   )

    drop table(:lol_replays)
  end
end
