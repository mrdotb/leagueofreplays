defmodule Lor.Repo.Migrations.UpdateLolParticipantsOnDelete do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint(:lol_participants, "lol_participants_opponent_participant_id_fkey")

    drop constraint(:lol_participants, "lol_participants_match_id_fkey")

    alter table(:lol_participants) do
      modify :match_id,
             references(:lol_matches,
               column: :id,
               name: "lol_participants_match_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute(
      "ALTER TABLE lol_participants alter CONSTRAINT lol_participants_match_id_fkey NOT DEFERRABLE"
    )

    alter table(:lol_participants) do
      modify :opponent_participant_id,
             references(:lol_participants,
               column: :id,
               name: "lol_participants_opponent_participant_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    execute(
      "ALTER TABLE lol_participants alter CONSTRAINT lol_participants_opponent_participant_id_fkey NOT DEFERRABLE"
    )
  end

  def down do
    drop constraint(:lol_participants, "lol_participants_opponent_participant_id_fkey")

    alter table(:lol_participants) do
      modify :opponent_participant_id,
             references(:lol_participants,
               column: :id,
               name: "lol_participants_opponent_participant_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    drop constraint(:lol_participants, "lol_participants_match_id_fkey")

    alter table(:lol_participants) do
      modify :match_id,
             references(:lol_matches,
               column: :id,
               name: "lol_participants_match_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end
  end
end
